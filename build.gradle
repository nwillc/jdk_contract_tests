/*
 * Copyright (c) 2016, nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
 * provided that the above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 *
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter {
            url 'http://jcenter.bintray.com'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'http://maven.tmatesoft.com/content/repositories/releases/'
        }
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version",
                'gradle.plugin.com.github.nwillc:vplugin:2.0.1',
                'au.com.ish.gradle:release:2.2.2',
                'org.tmatesoft.sqljet:sqljet:1.1.9',
                "org.ajoberstar:gradle-git-publish:$git_publish_version",
                "org.junit.platform:junit-platform-gradle-plugin:$junit_plugin_version"


    }
}

apply plugin: 'release'
apply plugin: 'com.github.nwillc.vplugin'
apply plugin: 'java'
apply plugin: "com.jfrog.bintray"
apply plugin: "maven-publish"
apply plugin: "jacoco"
apply plugin: "maven"
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.ajoberstar.git-publish'

repositories {
    mavenLocal()
    jcenter {
        url 'http://jcenter.bintray.com'
    }
}

dependencies {
    compile 'junit:junit:4.12',
            "org.assertj:assertj-core:$assertj_version",
            "org.junit.jupiter:junit-jupiter-api:$jupiter_version"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
}

group = "com.github.nwillc"
archivesBaseName = "jdk_contract_tests"
version = "1.9.2"
targetCompatibility = "1.8"
sourceCompatibility = "1.8"

junitPlatform.enableStandardTestTask true

jacoco {
    toolVersion = '0.7.9'
    applyTo junitPlatformTest
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

release {
    failOnSnapshotDependencies = true
    allowLocalModifications = true
    releaseDryRun = false
    scm = 'git'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'JDK interface contract test for JUnit'
        websiteUrl = 'https://github.com/nwillc/jdk_contract_tests'
        issueTrackerUrl = 'https://github.com/nwillc/jdk_contract_tests/issues'
        vcsUrl = 'https://nwillc@github.com:nwillc/jdk_contract_tests.git'
        licenses = ['ISC']
        labels = [project.name]
        publicDownloadNumbers = true
    }
}

gitPublish {
    repoUri = 'git@github.com:nwillc/jdk_contract_tests.git'
    branch = 'gh-pages'
    contents {
        from 'README.md'
        from 'src/pages'
        from(javadoc) {
            into 'javadoc'
        }
    }
}

gitPublishCopy.dependsOn javadoc

test {
    testLogging {
        events "skipped", "failed"
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("Tests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount")
        }
    }
}
